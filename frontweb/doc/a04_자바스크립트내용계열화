자바스크립트 기초를 다루는 커리큘럼을 계열화하여 구성한다면, 
웹 프로그래밍에 필요한 기본적인 개념과 문법을 중심으로 학습자가 
기초적인 자바스크립트 코드를 작성하고 이해할 수 있도록 진행됩니다.

### 1. 자바스크립트 소개 및 환경 구축
- **자바스크립트란?**
  - 역사와 특징
  - 웹에서의 역할

- **환경 구축**
  - 웹 브라우저에서의 실행
  - 개발자 도구 소개
  - 간단한 코드 실행

### 2. 변수와 데이터 타입
- **변수 선언**
  - `var`(전역변수, 선언 후 재선언 가능),
  	`let`(지역/전역변수 구분, 선언 후 재선언 불가), 
  	`const`(상수, 한번 선언 후, 초기화되면 다시 재할당 불가)
  - 변수 이름 규칙
  	_,$ 만 가능
  	숫자로 시작 불가능
  	keyword사용 불가(특징 기본 변수가 정상적으로 동작하지 않는 경우가 많음
  				- name, top 등등 BOM/DOM에 기본 내장된 키워드가 많음)
  	대소문자 구분..

- **기본 데이터 타입**
  - 숫자 (Number)
  - 문자열 (String)
  - 불리언 (Boolean)
  - 함수형 (function)
  - 객체형 (Object)
  ------------------------------- (위에가 핵심)
  - Undefined(선언되지 않고, 초기화되지 않은 변수사용), 
  	Null(객체의 경우 값이 할당되지 않은 경우),  
  	NaN(숫자형 문자열이 아닌데, 형변환 처리시)
  	===> 실행은 되나 에러리턴코드
  
- **형 변환**
  - 형변환이 자유로운 편인다.
    사칙연산자 + 이외에는 숫자형 문자열인경우 자동형변환이 된다.
    	
    	"2"+"3" ==> "23" (문자열 연결)
    	"2"-"3" ==> -1 (형변환되어 숫자연산처리)
    	"2"*"3" ==> 6 
    	"2"/"3" ==> 0,666666
    	
  - 명시적, 암묵적 형 변환
  	
  	Number() : 실수/ 정수 형변환처리
  	parseInt() : 정수형 형변환처리
  		parseInt("25.75달러") ==> 25
  	parseFloat() : 실수형 형변환처리 숫자만 추출
  		parseFloat("25.75달러") ==> 25.75
  
  - 데이터 타입 확인하기
  	typeof() 함수 활용.

### 3. 기본 연산자와 제어 구문
- **연산자**
  - 산술 연산자
  - 비교 연산자
  - 논리 연산자

- **조건문**
  - `if`, `else`, `else if`
  - 삼항 연산자
  - `switch`문

- **반복문**
  - `for`
  - `while`, `do-while`
  
### 4. 함수
- **함수의 기본**
  - 함수 선언과 호출
  -----------------------------------
  	**변수형 함수
  	var fun01 = function(){
  	
  	}
  	fun01();  --> 호출
  	ㄴ> 선언과 다른변수로 할당, 실행 
  ------------------------------------
  	**선언적 함수
  	function fun02(){
  	
  	}
  	fun02()
  	// 선언된 내용을 특정 변수에 재할당
  	var fun03 = fun02;
  	fun03();  --> 호출
  	ㄴ> 원래 fun02에 선언된 내용이 재할당되어 수행된다. 
  -------------------------------------
  - 매개변수와 반환 값
  	function plus(num01,num02){  //  매개변수
  		var sum = num01+num02;  //  로직처리(저장/반복/조건)
  		return sum;  //  호출하는 곳에 전달할 리턴값
  	}
  	var tot1 = plus(25,5)  --> 호출  
  	var tot2 = plus(25,7)  --> 호출  
  	var tot3 = plus(30,5)  --> 호출
  	
  	# 매개변수의 여러가지 유형
  	1. 기본 변수 전달
  	2. js의 type 전달
  	ㄴ>(number(숫자), String(문자열),boolean(true/false),function, object(array포함))
  	-----------------------------------------------------------------------------
  	function call(name){
  		alert("이름 : "+name)
  	}
  	call("홍길동")
  	------------------------------------------------------------------------------
  	function greet(){
  		alert("안녕하세요(전달하는 함수)")
  	}
  	function callAll( helloFun ){ 
  	// var helloFun = greet 
  		alert("혼합함수")
  		helloFun();
  	}
  	// 함수에서 매개변수로 greet로 정의된 내용을 전달 
  	callAll(greet);
  	------------------------------------------------------------------------------
  	3. 익명함수 매개변수 처리
  		// 정의된 함수를 호출하여 매개변수로 전달하는 것을 말한다.
  		// 정의된 내용을 재활용하지 않고 바로 사용할 때 활용된다. 
  		callAll( function(){alert("익명함수 전달")} )
  		// var helloFun = function(){alert("익명함수 전달")}
  		// helloFun() 실행처리..
  		// ==> 결과적으로 alert("혼합함수") 수행,
  		//		alert("익명함수 전달") 수행 처리된다. 
  		
  		
  	# 동적인 매개변수 처리
  		동일한 함수로 여러가지 매개변수에 따른 처리를 하고자 할 때 사용
  		
  		=========================================================
  		1) arguments
  			내장객체를 이용하여 매개변수의 내용을 순서로 배열로 할당하여 처리..
  		-------------------------------------------------------	
  		ex) arguments 예시
  		
  			function call(){
  				arguments[0]
  				arguments[1]
  				arguments[2]
  			}
  			call(3000) 
  				arguments.length(1) 
  				-arguments[0]에 3000 할당
  			call(1,2)
  				arguments.length(2) 
  				-arguments[0]에 1 할당
  				-arguments[1]에 2 할당
  			call("홍길동","김길동","신길동")
  				arguments.length(3) 
  				-arguments[0]에 홍길동 할당
  				-arguments[1]에 김길동 할당
  				-arguments[2]에 신길동 할당
  			
  			// 입력된 내용에 평균과 합산 
  				ㄴ--> 매번 상황이 달라지는 경우 사용하면 좋다(학생이 달라지는 경우)
  			
  			function pointSum(){
  				// arguments = [70,80]
  				var tot=0
  				for(var idx=0; idx<arguments.length; idx++){
  					tot+=arguments[idx]  --> 70,80
  				}
  			alert(`
  				통계낼 인원 : ${arguments.length}
  				총점 : ${tot}
  				평균 : ${tot/arguments.length}
  			`)
  			}
  			pointSum(70,80)
  			pointSum(80,80,90)
  			pointSum(80,80,90,90,90)  
  		=============================================================
  		2) ...배열명 : 내가 지정한 배열명으로 매개변수 값을 선언하여 활용할 수 있다.
			ㄴ--> atguments 를 좀더 효율적으로 처리 가능
		------------------------------------------------------------	
		ex) ...배열명 예시
		
			function pointSum(...points){
  				// points = [80,80,90,90,90]
  				var tot=0
  				for(var idx=0; idx<points.length; idx++){
  					tot+=points[idx]  --> 70,80
  				}
  			alert(`
  				통계낼 인원 : ${points.length}
  				총점 : ${tot}
  				평균 : ${tot/points.length}
  			`)
  			}
  			pointSum(70,80)
  			pointSum(80,80,90)
  			pointSum(80,80,90,90,90)  
  		===============================================================
		3) default매개변수
			선언된 default 값으로 처리
			function 함수명(name="이름없음", price=0; cnt=1)
			함수명(정보1,정보2,정보3); 	하면 순서대로 할당됨 
		----------------------------------------------------------------
		ex) default 매개변수 예시
		
			function buyProd(name="구매 물건없음",price=0,cnt=1){
				alert(`
					# 구매정보 #
					물건명 : ${name}
					가격 : ${price}
					갯수 : ${cnt}
					총비용 : ${price*cnt}
				`)
			}
			buyProd()
			buyProd('사과')
			buyProd('오렌지',3000)
			buyProd('수박',12000,5)
		==================================================================	
  	  
- **기본 내장 함수**
  - `alert()`, `prompt()`, `confirm()`
  
  - 기타 유용한 내장 함수
  	parseInt(),parseFloat(),Number() : 형변환
  	eval() : 코드로 변환처리
  	isNaN() : 형변환시, 입력값이 숫자형문자열이 아닐때 여부를 check 해주는 boolean 함수
  	
  	setTimeout(함수,1/1000) : 해당 시간 이후 처리할 내용 함수로 구현
  	clearTimeout(변수) : 위 setTimeout을 메모리 해제 처리
  	
  	setInterval(함수,1/1000) : 해당 시간 간격마다 반복해서 처리할 내용
  	clearInterval(변수) : 위 setInterval 메모리 해제로 반복을 중단

### 5. 배열
- **배열의 정의와 사용**
  - 배열 생성
	var arry = [] (선언)
 
  - 배열 요소 접근
  	index로 추가 접근
  	arry[0] = 1000 
  	
  - 배열 메서드 (`push`, `pop`, `shift`, `unshift` 등)
  	배열명.push(마지막에 추가할 데이터)
  	배열명.pop() : 마지막에 내용을 삭제하면서 마지막 요소를 리턴한다. 

### 6. 객체 기초
- **객체의 정의와 사용**
	var obj = {속성:속성값, 속성2:속성2값 } 
	==> json(javascript object notation) 객체 선언 방식
	
	function Person(name, age){
		this.name =name;
		this.age = age
		this.show = function(){
			console.log("#객체#")
			console.log("이름 : "+this.name)
			console.log("나이 : "+this.age)
		}
	}
	var p01 = new Person("홍길동",25)
	
	class Car {
		constructor(brand, model){
			this.brand=brand
			this.model=model
		}
		displayInfo(){
			console.log(`이 차는 ${this.brand}이고 모델${this.model} 입니다`)
		}
		
	}
	var c01= new Car("현대","그렌저")
	c01.displayInfo()
	
  - 객체 리터럴
  - 프로퍼티와 메서드
  - 객체 내부에서의 `this`
  JSON(javascript objection notation) 형식
  ㄴ=> var 객체명 = {속성 : 속성값, 속성 : 속성값 ...}
  var 객체형배열 = [{속성:속성값},{속성:속성값}]
  // 서버 <==> 클라이트
  // 자바의 Person ==> json Person
  
  var person = {name:"홍길동",age:25,loc:"서울",
  				show:function(){
  					alert(`
  						# person의 정보 #
  						이름 : #{this.name}  //  js에서는 반드시 속성값 접근할떈 this써야됨
  						나이 : #{this.age}  //  ㄴ-> 자바랑 다른점 (자바는 생략가능)
  						사는곳 : #{this.loc}
  					`)
  				  }
  				}
  person.name, person['age']  ===>  js에서는 이 방식도 지원
  person.show()	-> 객체.메서드명()
  
  function Person(name, age, loc){
  	this.name=name;
  	this.age=age;
  	this.loc=loc;
  }
  
  var p01 = new Person('홍길동',25,'서울');
  class Person{
  	Constructor(name, age, loc){
  		this.name=name;
  		this.age=age;
  		this.loc=loc;
  	}
  }
  
  ------------------------------------------------------------------------위 기초내용
### 7.  DOM 조작**

* BOM(Bowser Object Model) : 브라우저 로딩시 창자체를 의미하는 객체
	var win = window.open("파일명","","속성")
	win.document.querySelector("h1")
	-하위에
* DOM(Document Object Model)의 기본 개념과 구조를 학습합니다.
	var h1Ob = document.query

* DOM을 사용하여 HTML 요소를 생성, 수정, 삭제하는 방법을 익힙니다.

화면에 있는 Tag들을 객체화하여 도적으로 처리할 때, 사용한다.

<h2 style="color:blue" align="center"> 안녕하세요 </h2> ==> 정적인 태그 구현
==> var h2Ob = document.querySelector("h2"); 이러면 h2를 객체화해서 받아들임

객체화하게되면 이벤트를 속성으로 지정해서 이 이벤트를 처리했을때, 함수를 할당해서,
그 함수의 블럭 내용을 수행해주는 처리.

h2Ob.onclick = function(){
	alert('Wow! touch me??????') // 클릭하면 저 알림창 뜨게 함수처리
	h2Ob.align = "right"; // 기존 가운데 정렬, 클릭시 동적으로 오른쪽 정렬을 처리.
	h2Ob.style.color = "red"; // 기존 파런색 글자, 클릭시 글자색상을 빨간색으로 처리
	h2Ob.innerTwxt = "hello"; // 타이틀 내용을 변경..
}

출력형식
	DOM객체 중에 화면에 출력할 내용을 포함하는 경우를 말한다.
	h1~h6, p, div, span
	1) 그대로 출력한 처리할 때.
		.innerText : 호출
		.innerText = "출력할내용" : 할당
	2) 다른 요소객체 태그를 포함해서 그 내용을 랜더링(해석) 출력
		.innerHTML : 호출
		.innerHTML = "태그코드" : 할당
		


### 8. 이벤트와 기본 DOM 조작
- **웹 페이지 이벤트**
  - `click`, `mouseover`, `keydown` 등의 이벤트
  [himan..//아이디입력] <input type = "text" name="id">
  var idObj = document.querySelector("[name=id]");
  idObj.onKeyup = function(){
  	var idVal = idObj.value : 입력할 떄, 값을 가져온다.
  	if(idVal.length<8){
  		alert("아이디는 8글자 이상이여야합니다.")
  	}
  }
 
 
  
- **DOM 선택과 조작**
  - 요소 선택 (`getElementById`, `querySelector` 등)
  - 요소 내용 및 스타일 조작
  
### 9. 이벤트 처리**

* 이벤트, 이벤트 리스너, 이벤트 버블링 등 이벤트 처리의 기본 개념을 학습합니다.
* 마우스 이벤트, 키 이벤트, 로드 이벤트 등 다양한 이벤트를 처리하는 방법을 익힙니다.


### 10. AJAX**

* AJAX(Asynchronous JavaScript and XML)의 기본 개념과 작동 방식을 학습합니다.
* AJAX를 사용하여 서버와 비동기 통신을 수행하는 방법을 익힙니다.


  
### 8. 마무리 및 실전 예제
- 기초적인 웹 애플리케이션 만들기 (예: 할 일 목록)
- 이전에 배운 개념들을 활용한 실습

이 커리큘럼을 통해 학습자는 자바스크립트의 기본 문법과 웹에서의 활용 방법에 대한 기초적인 이해를 얻을 수 있습니다
